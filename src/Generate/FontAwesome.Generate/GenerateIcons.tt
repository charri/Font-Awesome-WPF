<#@ template language="C#" debug="true" hostSpecific="true"  #>
<#@ output extension="log" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="FontAwesome.Generate" #>
<#@ include file="Utils.tt" #>
<#
	Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile));

	var folderProject = Directory.GetCurrentDirectory();
	var folderRepo = new DirectoryInfo(folderProject).Parent.Parent.Parent.FullName;
	var configFile = Path.Combine(folderRepo, @"Font-Awesome\_config.yml");

	var outputs = new List<string> { "WPF", "UWP", "WIN81" };

	foreach(var forOutput in outputs) {
		var outputFile = Path.Combine(folderRepo, string.Format(@"src\{0}\FontAwesome.{0}\FontAwesomeIcon.cs", forOutput));
		var interop = new FontAwesomeInterop(configFile);

		var baseUrl = String.Format("{0}/{1}/{{0}}/", interop.Config.Url, interop.Container.IconDestination);
	
		WriteAutoGenerated();

		WriteLine("namespace FontAwesome.{0} {{", forOutput);
		PushIndent("\t");
		WriteLine("using System.ComponentModel;");
		WriteLine("///<summary>");
		WriteLine("///	FontAwesome {0} by {1} (@{2})", interop.Config.DocBlob, interop.Config.Author.Name, interop.Config.Author.Github);
		WriteLine("///	{0}", interop.Config.Tagline);
		WriteLine("///	License http://fontawesome.io/license (Font: {0}, C#: MIT License)", interop.Config.DocBlob, interop.Config.Tagline);
		WriteLine("///</summary>");
		WriteLine("///<see href=\"{0}\" />", interop.Config.Url);
		WriteLine("///<seealso href=\"{0}\" />", interop.Config.Github.Url);
		WriteLine("///<seealso href=\"https://github.com/charri/Font-Awesome-WPF\" />");
		WriteLine("public enum FontAwesomeIcon {");
		PushIndent("\t");
		WriteLine("///<summary>Set this value to show no icon.</summary>");
		WriteLine("None = 0x0,");


		foreach(var item in interop.Items) {
			WriteLine("///<summary>{0} (created: {1})</summary>", item.Name, item.Created);
			WriteLine("///<see href=\"{0}\" />", String.Format(baseUrl, item.Id));
			var sb = new StringBuilder();
			sb.AppendFormat("Description(\"{0}\"),", item.Name);
			sb.AppendFormat("IconId(\"{0}\"),", item.Id);
		
			if(item.Categories != null && item.Categories.Count > 0) {
				foreach(var cat in item.Categories) {
					sb.AppendFormat("IconCategory(\"{0}\"),", cat);
				}
			}
			sb.Remove(sb.Length - 1, 1);
			WriteLine("[{0}]", sb.ToString());
			WriteLine("{0} = 0x{1},", item.SafeName, item.Unicode);

			if(item.Aliases != null) {
				foreach(var alias in item.Aliases) {
					var safeAlias = item.Safe(alias);
					if(String.Equals(safeAlias, item.SafeName, StringComparison.InvariantCultureIgnoreCase)) continue;
					WriteLine("///<summary>Alias of: {0}</summary>", item.SafeName);
					WriteLine("///<see cref=\"F:FontAwesome.WPF.FontAwesomeIcon.{0}\" />", item.SafeName);
					WriteLine("[IconAlias]");
					WriteLine("{0} = {1},", safeAlias, item.SafeName);
				}
			}
		}
		PopIndent();
		WriteLine("}");
		PopIndent();
		WriteLine("}");

		SaveOutput(outputFile);
	}
#>